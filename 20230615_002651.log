2023/06/15 00:26:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.16 (default, Jun 12 2023, 21:00:42) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 1918092637
    GPU 0: Quadro P620
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2
    NVCC: Cuda compilation tools, release 10.2, V10.2.8
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.29.30148 版
    GCC: n/a
    PyTorch: 1.8.2+cu102
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192930040
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 2019
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=C:/w/b/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -DNDEBUG -DUSE_FBGEMM -DUSE_XNNPACK, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, 

    TorchVision: 0.9.2+cu102
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1918092637
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/15 00:26:58 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(769, 769))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(769, 769)),
    pretrained='torchvision://resnet18',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=512,
        in_index=3,
        channels=128,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=True,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=256,
        in_index=2,
        channels=64,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=True,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='slide', crop_size=(769, 769), stride=(513, 513)))
dataset_type = 'CityscapesDataset'
data_root = 'data/Watermelon87_Semantic_Seg_Mask/'
crop_size = (769, 769)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2049, 1025),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(769, 769), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2049, 1025), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='CityscapesDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2049, 1025),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(769, 769), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CityscapesDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2049, 1025), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CityscapesDataset',
        data_root='data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2049, 1025), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = None
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=600,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=3000, val_interval=100)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=100),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
launcher = 'none'
work_dir = './work_dirs\\pspnet_r18b-d8_4xb2-80k_cityscapes-769x769'

2023/06/15 00:27:01 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/15 00:27:01 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/15 00:27:04 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/15 00:27:04 - mmengine - INFO - load model from: torchvision://resnet18
2023/06/15 00:27:04 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet18
2023/06/15 00:27:04 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet18 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet18 

decode_head.conv_seg.weight - torch.Size([6, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([128, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([128, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([128, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([128, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([128, 1024, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([6, 64, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/15 00:27:04 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/15 00:27:04 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/15 00:27:04 - mmengine - INFO - Checkpoints will be saved to D:\Projects\mmsegmentation-main\work_dirs\pspnet_r18b-d8_4xb2-80k_cityscapes-769x769.
2023/06/15 00:27:54 - mmengine - INFO - Exp name: pspnet_r18b-d8_4xb2-80k_cityscapes-769x769_20230615_002651
2023/06/15 00:27:54 - mmengine - INFO - Iter(train) [  23/3000]  lr: 9.6721e-03  eta: 1:46:48  time: 1.5926  data_time: 0.0024  memory: 2418  loss: 1.5583  decode.loss_ce: 1.0516  decode.acc_seg: 81.0346  aux.loss_ce: 0.5067  aux.acc_seg: 50.4567
2023/06/15 00:28:37 - mmengine - INFO - Iter(train) [  50/3000]  lr: 9.2681e-03  eta: 1:30:42  time: 1.5789  data_time: 0.0028  memory: 1490  loss: 0.7840  decode.loss_ce: 0.5155  decode.acc_seg: 89.1638  aux.loss_ce: 0.2686  aux.acc_seg: 83.5370
2023/06/15 00:29:56 - mmengine - INFO - Iter(train) [ 100/3000]  lr: 8.5144e-03  eta: 1:22:46  time: 1.5740  data_time: 0.0023  memory: 1491  loss: 0.7175  decode.loss_ce: 0.5056  decode.acc_seg: 93.2033  aux.loss_ce: 0.2119  aux.acc_seg: 89.2976
2023/06/15 00:29:56 - mmengine - INFO - Saving checkpoint at 100 iterations
2023/06/15 00:30:14 - mmengine - INFO - per class results:
2023/06/15 00:30:14 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 82.33 | 92.78 |
|   green    |  87.5 | 97.85 |
|   white    |  6.42 |  6.46 |
| seed-black | 38.11 |  60.5 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/15 00:30:14 - mmengine - INFO - Iter(val) [11/11]    aAcc: 85.4700  mIoU: 42.8700  mAcc: 51.5200  data_time: 0.1594  time: 1.5625
2023/06/15 00:31:32 - mmengine - INFO - Iter(train) [ 150/3000]  lr: 7.7532e-03  eta: 1:19:09  time: 1.5749  data_time: 0.0022  memory: 1491  loss: 0.8337  decode.loss_ce: 0.5684  decode.acc_seg: 79.2945  aux.loss_ce: 0.2653  aux.acc_seg: 76.2874
2023/06/15 00:32:51 - mmengine - INFO - Iter(train) [ 200/3000]  lr: 6.9834e-03  eta: 1:16:43  time: 1.5816  data_time: 0.0023  memory: 1491  loss: 0.6417  decode.loss_ce: 0.4367  decode.acc_seg: 67.9141  aux.loss_ce: 0.2050  aux.acc_seg: 62.9604
2023/06/15 00:32:51 - mmengine - INFO - Saving checkpoint at 200 iterations
2023/06/15 00:33:06 - mmengine - INFO - per class results:
2023/06/15 00:34:14 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 67.83 | 70.59 |
|   green    | 78.19 | 98.44 |
|   white    | 40.06 |  58.1 |
| seed-black | 30.06 | 76.75 |
| seed-white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/15 00:34:14 - mmengine - INFO - Iter(val) [11/11]    aAcc: 77.1700  mIoU: 43.2300  mAcc: 60.7800  data_time: 0.0062  time: 1.2640
2023/06/15 00:35:33 - mmengine - INFO - Iter(train) [ 250/3000]  lr: 6.2040e-03  eta: 1:27:18  time: 1.5863  data_time: 0.0029  memory: 1491  loss: 0.8971  decode.loss_ce: 0.6073  decode.acc_seg: 96.2512  aux.loss_ce: 0.2898  aux.acc_seg: 95.3608
2023/06/15 00:37:02 - mmengine - INFO - Iter(train) [ 300/3000]  lr: 5.4132e-03  eta: 1:24:40  time: 1.5762  data_time: 0.0024  memory: 1491  loss: 0.4910  decode.loss_ce: 0.3268  decode.acc_seg: 87.6756  aux.loss_ce: 0.1642  aux.acc_seg: 85.5133
2023/06/15 00:37:02 - mmengine - INFO - Saving checkpoint at 300 iterations
2023/06/15 00:37:16 - mmengine - INFO - per class results:
2023/06/15 00:37:16 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 83.36 | 88.69 |
|   green    | 87.64 | 98.32 |
|   white    | 38.84 |  59.0 |
| seed-black | 56.13 | 72.51 |
| seed-white |  0.14 |  0.14 |
+------------+-------+-------+
2023/06/15 00:37:16 - mmengine - INFO - Iter(val) [11/11]    aAcc: 87.6000  mIoU: 53.2200  mAcc: 63.7300  data_time: 0.0050  time: 1.2635
2023/06/15 00:38:35 - mmengine - INFO - Iter(train) [ 350/3000]  lr: 4.6092e-03  eta: 1:21:12  time: 1.5853  data_time: 0.0025  memory: 1491  loss: 0.5980  decode.loss_ce: 0.4083  decode.acc_seg: 94.2416  aux.loss_ce: 0.1898  aux.acc_seg: 92.4685
2023/06/15 00:39:55 - mmengine - INFO - Iter(train) [ 400/3000]  lr: 3.7887e-03  eta: 1:18:17  time: 1.5816  data_time: 0.0026  memory: 1491  loss: 0.6753  decode.loss_ce: 0.4514  decode.acc_seg: 92.6845  aux.loss_ce: 0.2238  aux.acc_seg: 86.4136
2023/06/15 00:39:55 - mmengine - INFO - Saving checkpoint at 400 iterations
2023/06/15 00:40:09 - mmengine - INFO - per class results:
2023/06/15 00:40:09 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 91.38 | 95.95 |
|   green    | 90.43 | 98.98 |
|   white    | 60.48 | 67.47 |
| seed-black | 63.47 | 72.77 |
| seed-white |  32.1 | 34.91 |
+------------+-------+-------+
2023/06/15 00:40:09 - mmengine - INFO - Iter(val) [11/11]    aAcc: 92.8700  mIoU: 67.5700  mAcc: 74.0200  data_time: 0.0063  time: 1.2686
2023/06/15 00:41:28 - mmengine - INFO - Iter(train) [ 450/3000]  lr: 2.9473e-03  eta: 1:15:44  time: 1.5846  data_time: 0.0026  memory: 1491  loss: 0.4919  decode.loss_ce: 0.3160  decode.acc_seg: 87.6985  aux.loss_ce: 0.1759  aux.acc_seg: 76.8770
2023/06/15 00:42:48 - mmengine - INFO - Iter(train) [ 500/3000]  lr: 2.0767e-03  eta: 1:13:24  time: 1.5777  data_time: 0.0026  memory: 1491  loss: 0.4903  decode.loss_ce: 0.3215  decode.acc_seg: 84.5251  aux.loss_ce: 0.1688  aux.acc_seg: 75.0759
2023/06/15 06:23:05 - mmengine - INFO - Saving checkpoint at 500 iterations
2023/06/15 06:23:20 - mmengine - INFO - per class results:
2023/06/15 06:23:20 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 83.57 | 87.28 |
|   green    | 88.83 |  99.2 |
|   white    | 42.01 | 76.81 |
| seed-black | 58.12 | 65.06 |
| seed-white | 33.49 | 35.51 |
+------------+-------+-------+
2023/06/15 06:23:20 - mmengine - INFO - Iter(val) [11/11]    aAcc: 87.9200  mIoU: 61.2000  mAcc: 72.7700  data_time: 0.0040  time: 1.2716
2023/06/15 06:24:38 - mmengine - INFO - Iter(train) [ 550/3000]  lr: 1.1593e-03  eta: 1:11:14  time: 1.5719  data_time: 0.0000  memory: 1491  loss: 0.4531  decode.loss_ce: 0.2977  decode.acc_seg: 89.3207  aux.loss_ce: 0.1554  aux.acc_seg: 85.1790
2023/06/15 06:25:57 - mmengine - INFO - Iter(train) [ 600/3000]  lr: 1.0000e-04  eta: 1:09:12  time: 1.5766  data_time: 0.0031  memory: 1491  loss: 0.7468  decode.loss_ce: 0.5102  decode.acc_seg: 95.0895  aux.loss_ce: 0.2366  aux.acc_seg: 93.5024
2023/06/15 06:25:57 - mmengine - INFO - Saving checkpoint at 600 iterations
2023/06/15 06:26:11 - mmengine - INFO - per class results:
2023/06/15 06:26:11 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 84.29 | 86.59 |
|   green    | 89.77 | 98.75 |
|   white    | 44.35 | 81.65 |
| seed-black | 65.48 | 78.08 |
| seed-white | 46.34 | 54.31 |
+------------+-------+-------+
2023/06/15 06:26:11 - mmengine - INFO - Iter(val) [11/11]    aAcc: 88.7300  mIoU: 66.0500  mAcc: 79.8800  data_time: 0.0052  time: 1.2640
2023/06/15 06:27:30 - mmengine - INFO - Iter(train) [ 650/3000]  lr: 1.0000e-04  eta: 1:07:18  time: 1.5781  data_time: 0.0000  memory: 1491  loss: 0.6388  decode.loss_ce: 0.4132  decode.acc_seg: 92.7656  aux.loss_ce: 0.2257  aux.acc_seg: 93.8185
2023/06/15 06:28:49 - mmengine - INFO - Iter(train) [ 700/3000]  lr: 1.0000e-04  eta: 1:05:29  time: 1.5781  data_time: 0.0000  memory: 1491  loss: 0.5442  decode.loss_ce: 0.3624  decode.acc_seg: 81.9397  aux.loss_ce: 0.1818  aux.acc_seg: 75.9376
2023/06/15 06:28:49 - mmengine - INFO - Saving checkpoint at 700 iterations
2023/06/15 06:29:04 - mmengine - INFO - per class results:
2023/06/15 06:29:04 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 88.15 | 90.75 |
|   green    | 90.05 | 98.52 |
|   white    | 53.84 | 79.57 |
| seed-black | 65.33 | 80.06 |
| seed-white | 45.62 |  49.1 |
+------------+-------+-------+
2023/06/15 06:29:04 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.0800  mIoU: 68.6000  mAcc: 79.6000  data_time: 0.0065  time: 1.2669
2023/06/15 06:30:23 - mmengine - INFO - Iter(train) [ 750/3000]  lr: 1.0000e-04  eta: 1:03:44  time: 1.5766  data_time: 0.0047  memory: 1491  loss: 0.4351  decode.loss_ce: 0.2880  decode.acc_seg: 82.7243  aux.loss_ce: 0.1471  aux.acc_seg: 77.5673
2023/06/15 06:31:42 - mmengine - INFO - Iter(train) [ 800/3000]  lr: 1.0000e-04  eta: 1:02:02  time: 1.5812  data_time: 0.0016  memory: 1491  loss: 0.6954  decode.loss_ce: 0.4622  decode.acc_seg: 64.3736  aux.loss_ce: 0.2332  aux.acc_seg: 58.2271
2023/06/15 06:31:42 - mmengine - INFO - Saving checkpoint at 800 iterations
2023/06/15 06:31:57 - mmengine - INFO - per class results:
2023/06/15 06:31:57 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 90.31 | 94.15 |
|   green    | 88.79 | 99.15 |
|   white    |  56.8 | 67.87 |
| seed-black | 64.37 | 74.86 |
| seed-white | 39.76 | 42.86 |
+------------+-------+-------+
2023/06/15 06:31:57 - mmengine - INFO - Iter(val) [11/11]    aAcc: 92.0700  mIoU: 68.0000  mAcc: 75.7800  data_time: 0.0065  time: 1.2708
2023/06/15 06:33:16 - mmengine - INFO - Iter(train) [ 850/3000]  lr: 1.0000e-04  eta: 1:00:24  time: 1.5781  data_time: 0.0000  memory: 1491  loss: 0.5049  decode.loss_ce: 0.3208  decode.acc_seg: 95.4787  aux.loss_ce: 0.1841  aux.acc_seg: 87.8091
2023/06/15 06:34:36 - mmengine - INFO - Iter(train) [ 900/3000]  lr: 1.0000e-04  eta: 0:58:49  time: 1.6158  data_time: 0.0031  memory: 1491  loss: 0.4859  decode.loss_ce: 0.3083  decode.acc_seg: 88.3511  aux.loss_ce: 0.1776  aux.acc_seg: 87.9523
2023/06/15 06:34:36 - mmengine - INFO - Saving checkpoint at 900 iterations
2023/06/15 06:34:52 - mmengine - INFO - per class results:
2023/06/15 06:34:52 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     |  88.9 | 91.45 |
|   green    | 88.39 | 99.12 |
|   white    | 56.42 | 78.37 |
| seed-black | 65.35 |  76.7 |
| seed-white | 44.17 | 48.41 |
+------------+-------+-------+
2023/06/15 06:34:52 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.3400  mIoU: 68.6500  mAcc: 78.8100  data_time: 0.0078  time: 1.2722
2023/06/15 06:36:11 - mmengine - INFO - Iter(train) [ 950/3000]  lr: 1.0000e-04  eta: 0:57:14  time: 1.5769  data_time: 0.0000  memory: 1491  loss: 0.4835  decode.loss_ce: 0.3126  decode.acc_seg: 94.7676  aux.loss_ce: 0.1710  aux.acc_seg: 94.5199
2023/06/15 06:37:31 - mmengine - INFO - Exp name: pspnet_r18b-d8_4xb2-80k_cityscapes-769x769_20230615_002651
2023/06/15 06:37:31 - mmengine - INFO - Iter(train) [1000/3000]  lr: 1.0000e-04  eta: 0:55:43  time: 1.6691  data_time: 0.0078  memory: 1491  loss: 0.3437  decode.loss_ce: 0.2173  decode.acc_seg: 92.1950  aux.loss_ce: 0.1264  aux.acc_seg: 89.4126
2023/06/15 06:37:31 - mmengine - INFO - Saving checkpoint at 1000 iterations
2023/06/15 06:37:46 - mmengine - INFO - per class results:
2023/06/15 06:37:46 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 87.06 | 89.56 |
|   green    | 88.38 | 98.88 |
|   white    | 51.64 | 77.94 |
| seed-black | 64.52 | 78.67 |
| seed-white | 46.85 | 51.19 |
+------------+-------+-------+
2023/06/15 06:37:46 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.2800  mIoU: 67.6900  mAcc: 79.2500  data_time: 0.0065  time: 1.2710
